{"version":3,"sources":["sd-keen-vis.es6.js"],"names":["Polymer","is","properties","counterValue","type","Number","value","notify","project","String","readKey","collection","analysisType","timeframe","interval","chartData","Object","reflectToAttribute","seriesConfig","observers","created","config","ready","Keen","console","log","bind","attached","_updateQuery","_initClient","client","projectId","query","Query","event_collection","$","chartcanvas","_runQuery","run","err","res","result","_","map","n","parseInt","moment","start","format","set","handleClick","event","detail","sender","increment"],"mappings":"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","file":"sd-keen-vis.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'sd-keen-vis',\n\n    properties: {\n        /**\n        * This property keeps track of the number of clicks.\n        *\n        * @property counterValue\n        */\n        counterValue: {\n            type: Number,\n            value: 0,\n            notify: true\n        },\n        project: {\n            type: String\n        },\n        readKey: {\n            type: String\n        },\n        collection: {\n            type: String\n        },\n        analysisType: {\n            type: String\n        },\n        timeframe: {\n            type: String\n        },\n        interval: {\n            type: String\n        },\n        chartData: {\n            type: Object,\n            notify: true,\n            reflectToAttribute: true\n            //readOnly: true\n        },\n        seriesConfig: {\n            type: Object,\n            notify: true,\n            reflectToAttribute: true\n            //readOnly: true\n        }\n    },\n    observers: [\n        //TODO -- these three should be an object\n        '_initClient(project, key)',\n        '_updateQuery(collection, analysisType)'\n    ],\n    created: function() {\n        this.config = {};\n    },\n    ready: function() {\n        Keen.ready(function() {\n            console.log('Keen ready.');\n        }.bind(this));\n    },\n    attached: function() {\n       console.log('attached');\n       this._updateQuery();\n    },\n    _initClient: function() {\n        console.log('initClient');\n        this.client = new Keen({\n            projectId: this.project,\n            readKey: this.readKey\n        });\n    },\n    _updateQuery: function() {\n        if (!this.client) {\n            this._initClient()\n        }\n        else {\n            console.log('update query');\n            this.query = new Keen.Query(this.analysisType, {\n                event_collection: this.collection,\n                timeframe: this.timeframe,\n                //targetProperty: this.property,\n                interval: this.interval\n                //groupBy: this.group,\n                //filters: this.filters\n            });\n            console.log(this.query);\n            console.log(this.$.chartcanvas);\n            this._runQuery();\n        }\n    },\n    _runQuery: function() {\n        if (this.client) {\n            this.client.run(this.query, function(err, res){\n                if (err) {\n                    // there was an error!\n                    console.log(err);\n                }\n                else {\n                    console.log(res.result);\n                    var result = res.result;\n                    console.log(result);\n                    result = _.map(result, function(n) {\n                        console.log(n);\n                        n = {\n                            'x': parseInt(moment(n.timeframe.start).format('x')),\n                            'y': n.value\n                        }\n                        return n;\n                    })\n                    console.log(result);\n                    var seriesConfig = {\n                        \"seriesKey\": {  //seriesKey is a unique identifier for the configuration\n                            \"type\": \"line\",  //line or scatter\n                            \"name\": \"My Series\",  //human readable name\n                            \"x\": \"x\",  //index or key name for independent variable\n                            \"y\": \"y\",  //index or key name for dependent variable\n                            //\"xAxisUnit\": \"Volt\", //Unit to be used for the X axis. Can be ignored if x axis is time based\n                            \"yAxisUnit\": \"Oranges\", //unit to be used for the Y axis.\n                            //\"color\": \"rgb(0,0,0)\", //color you want the chart\n                            \"axis\": {\n                                \"id\": \"AXIS_ID\",   //a unique identifier\n                                \"side\": \"left\",    //the side that you want the axis to draw on, `left` or `right`\n                                \"number\": 1       //the order of the axis on each side\n                            }\n                        }\n                    }\n\n                    this.set('seriesConfig', seriesConfig);\n                    this.set('chartData', result);\n                }\n            }.bind(this));\n        }\n    },\n\n    /**\n    * Handles click on the element defined in 'on-click' on the template.\n    *\n    * @method handleClick\n    */\n    handleClick: function(event, detail, sender) {\n      this.increment();\n    },\n\n    /**\n    * Increments the counter\n    *\n    * @method increment\n    */\n    increment: function() {\n      this.counterValue++;\n    }\n  });\n})();\n"]}